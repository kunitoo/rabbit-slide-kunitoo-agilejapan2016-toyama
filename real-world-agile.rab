= アジャイルソフトウェア開発の概要と現場での実践

: author
   伊藤 邦彦
: institution
   永和システムマネジメント
: content-source
   Agile Japan 2016 北陸
: date
   2016-06-25
: allotted-time
   55m
: theme
   lightning-clear-blue

= 内容

* アジャイル開発プロセスの基礎知識
* 現場での実践と工夫

= p self

* 名前: 伊藤 邦彦 @kunitoo
* 出身: 富山
* 在住: 東京
* 所属: アジャイル事業部
* 仕事: [Ruby, Rails, Neo4j]

= 使っているウィンドウマネージャ

awesome window manager

  # image
  # src = images/awesome_window.png
  # relative_height = 100

= アジャイルと私

* 永和に入社してアジャイルな開発を体験する
* アジャイルサムライ道場を渡り歩く
* 様々なプロジェクトに参画する
* XPE 読書会でもう一度アジャイルについて考える

= 弊社とアジャイル

= Agile Japan 2016 サテライトスポンサー

  # image
  # src = images/agile_japan_satellite.png
  # relative_height = 90

= ((' '))

  # image
  # src = images/sponsor_slide.png
  # relative_height = 115

= 本日の目標

* アジャイル開発の知識を学ぶ・おさらいする
* 現場に持ち替り実践するヒントを得る

= 前半

永和システムマネジメントで行っているセミナー資料を使ってアジャイル開発の基礎知識を学びます

= 後半

発表者が参画したプロジェクトの事例を元に、現場での導入と実践についてお話します

= 前半のおしながき

* アジャイルプロセスの概要
* XP の概観

= アジャイル開発プロセスの基礎知識

# 資料が変わる

= 後半のおしながき

* プラクティスの活用事例
* どのように導入するか

= プラクティスの活用事例

* チームや周りの状況によってアレンジ
* 必ずしも教科書通りにやる必要はない

= アレンジの注意点

* アジャイル宣言の背後にある原則を忘れてはならない
* 原則を守りチームによい影響を与えるようにアレンジする

= ((' '))

  # image
  # src = images/agile_principles.png
  # relative_height = 115

= タスクボード

* 一人でも始められる
* 全員が見える場所に置く
* 物理的な物がよい
  * 付箋を移動したことが横目で分かる
  * イテレーション内に置ける量に制限がかかる

= テスト駆動開発

* 慣れるまでは訓練が必要
  * できる人とペアプロするとよい
* 黄金の回転
  * (('wait'))Red
  * (('wait'))Green
  * (('wait'))Refactor

= ((' '))

  # image
  # src = images/tdd.png
  # relative_height = 85
(('tag:right'))(('tag:xx-small:http://www.slideshare.net/t_wada/the-spirit-of-tdd/27'))

= テスト駆動開発

* やりやすい分野とやりにくい分野はある
  * 未知のものや、画面などはやりづらい
  * ロジックが難しいものなどはやった方がいい
  * テストを書けないのはなにかがおかしい

= ペアプログラミング

難しい問題をプログラミングをするときにとてもいい

* 悩む時間が短かくなる
* 思った以上に疲れる

= まずはやってみる

* Coderetreat(ライフゲーム)
* TDD Boot Camp
* Extreme Fish Bowl

= 朝会

* 決まった時間に
* 短い時間で
* 昨日やったこと
* 今日やる事
* 問題点を共有する

= 朝会の落とし穴

* 定型的、儀式になりがち
* タスクボードがない場合お互いを見あってしまうため、問題vs私たちの形がくずれる
* 問題を話しすぎて長くなりやすい

= ふりかえり

* KPT形式が多い
* イテレーション毎に開催する
* やらないとチームの成長が止まる

= ふりかえりでチームが成長する

過去にあったTRY
* ふりかえりが長い
  * 時計を全員が見える場所におく
* バーンダウンチャートが書きづらい
  * Done になった日付を付箋に書き入れる

= イテレーション

1～3週間ごとにチームは稼動可能なシステムを顧客に提示する

* 1週間
  * 大変
* 2週間
  * おすすめ
* 3週間
  * 未経験

= イテレーション計画

* 誰がストーリーを作成するか?
  * プロダクトオーナー
  * 開発メンバーが補助する

= イテレーション計画

* 2,3イテレーション分を見積る
* チーム全員で見積る

= 継続的インテグレーション

* 機能分割の工夫が必要
  * なるべく小さくデプロイできるようにする
  * ときにはストーリーやタスクも分割して設計する必要がある
* できるだけ早くリリースの中に入れる
  * フィーチャーフラグを使う手法

= インセプションデッキ

* リニューアルで新サービスを開発する時に作成
* よかったこと
  * 開発中方向性を見失わなかった
* よくなかったこと
  * 全部はやらなくてもよかった

= 私とアジャイル開発の施行領域

* ((*大規模開発(多人数)*)) 10-20人
* 分散拠点（オフショア含む）開発
* 組織（会社）間をまたぐ開発チームによる開発
* (('del:組込みシステム開発'))

= 大規模開発(多人数)

* チームを4-6人に分割する
* 各チームのリーダーが中心に協調する
* イテレーション単位で時々メンバーを入れかえる

= 分散拠点（オフショア含む）開発

* 開発初期は同じ場所に集めた方がよい
* ツールを導入が必須
  * 音声チャット(hangout, appear.in)
  * コードレビュー(GitHub)
  * カンバン(PivotalTracker)

= 組織（会社）間をまたぐ開発チームによる開発

* できる限り垣根がないようにする
  * 同じ場所同じチームとして働く
* 組織間の連携を常に意識する

= どう導入するか

* 導入しやすいことから導入する
  * チームや状況によって異なる
* まずは教科書通りに始める
  * ふりかえりなどを通してアレンジする

= なにから導入するか

* 1人でカンバン
* 1人でTDD
* ペアプロ
* 2人でふりかえり

= まとめ

* 開発をアジャイルにするにはそれぞれの環境や状況によって異なる
* 導入しやすいプラクティスから始める
* 賛同してくれる仲間(同僚)を見つける

= ((' '))

  # blockquote
  # title = Extreme Programming 2nd Signature Model
  SOCIAL CHANGE STARTS WITH YOU.

= 質疑・応答

* 困りごとがあれば相談にのります
* 分かりづらかったところなど
